install.packages(Cairo)
install.packages("Cairo")
install.packages("cairo")
install.packages("Cairo")
capabilities()
install.packages("Cairo")
capabilities()
ls -l /usr/lib64 |grep -i cairo
install.packages("Cairo")
knitr::opts_chunk$set(dev.args = list(png = list(type = "cairo")))
# Carga paquetes
library(ggplot2)
library(ggdark)
library(latex2exp)
# Configura el directorio de trabajo
setwd("/home/murphy/Repos/covid19_mx/")
# Carga paquetes
library(ggplot2)
library(ggdark)
library(latex2exp)
# Configura el directorio de trabajo
setwd("/home/murphy/Repos/plotcovid19mx")
# Carga los datos limpios
clean <- read.csv("~/Repos/plotcovid19mx/clean.csv")
# Crea una gráfica base
p<-ggplot(data = smalldf, aes(x=days, y=y2)) + geom_point()
# Carga los datos limpios
clean <- read.csv("~/Repos/plotcovid19mx/clean.csv")
# Crea una gráfica base
p<-ggplot(data = clean, aes(x=days, y=y2)) + geom_point()
p
# Carga los datos limpios
datos <- read.csv("~/Repos/plotcovid19mx/clean_r.csv")
# Crea una gráfica base
p<-ggplot(data = datos, aes(x=fecha, y=muertes)) + geom_point()
p
lubridate::dmy(datos$fecha)
datos$newdate<-lubridate::dmy(datos$fecha)
View(datos)
# Carga los datos limpios
datos <- read.csv("~/Repos/plotcovid19mx/clean_r.csv")
# Cambia el formato de la fecha
datos$newdate<-lubridate::dmy(datos$fecha)
# Crea una gráfica base
p<-ggplot(data = datos, aes(x=fecha, y=muertes)) + geom_point()
p
# Carga los datos limpios
datos <- read.csv("~/Repos/plotcovid19mx/clean_r.csv")
# Cambia el formato de la fecha
datos$newdate<-lubridate::dmy(datos$fecha)
# Crea una gráfica base
p<-ggplot(data = datos, aes(x=newdate, y=muertes)) + geom_point()
p
model = nls(muertes ~ a * exp(b*newdate), data=datos, start = list(a=0.67, b=0.16))
xmax<-max(length(datos$fecha))
xmax
seq(1,xmax)
datos$number <- seq(0,xmax)
datos$number <- seq(0,xmax-1)
model = nls(muertes ~ a * exp(b*number), data=datos, start = list(a=0.67, b=0.16))
summary
summary(model)
model = nls(muertes ~ a * exp(b*number), data=datos, start = list(a=1, b=1))
model = nls(muertes ~ a * exp(b*number), data=datos, start = list(a=1, b=0.01))
summary(model)
# Ahora crea una nueva variable con nuevo formato para la fecha
xmax <- max(length(datos$fecha))
datos$number <- seq(0,xmax-1)
# Crea el modelo exponencial
model = nls(muertes ~ a * exp(b*number), data=datos, start = list(a=1, b=0.01))
# Imprime información del modelo
summary(model)
# Agrega el ajuste con los parámetros del modelo
p +
stat_smooth(method = 'nls', formula = y ~ a * exp(b * x), se=FALSE,
method.args = list(start = list(a = 0.0002, b = 0.12))) +
# la ecuación de la exponencial,
annotate("label", x=5, y=30, label=TeX('$y  =  0.67  e^{0.16  x }$')) +
# los títulos necesarios,
ylab("Muertes") + xlab("Día") +  ggtitle("Muertes por covid-19 (18-03/11-04)") +
# Cambia el tema base
theme_classic(base_size = 15)
p
p + stat_smooth()
p + stat_smooth(method = "nls", formula = y ~ a * exp(b * x))
p + stat_smooth(method = "nls", formula = y ~ a * exp(b * x), method.args = list(start=list(a=0.01,b=0.01))
)
p + stat_smooth(method = "nls", formula = y ~ a * exp(b * x), method.args = list(start=list(a=0.0002,b=0.1265)))
